/*** Autogenerated by WIDL 5.0 from ../../include/wine/winedxgi.idl - Do not edit ***/

#ifdef _WIN32
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif
#include <rpc.h>
#include <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __winedxgi_h__
#define __winedxgi_h__

#ifdef __i386_on_x86_64__
#pragma clang default_addr_space(push, ptr32)
#pragma clang storage_addr_space(push, ptr32)
#endif
/* Forward declarations */

#ifndef __IWineDXGISwapChainFactory_FWD_DEFINED__
#define __IWineDXGISwapChainFactory_FWD_DEFINED__
typedef interface IWineDXGISwapChainFactory IWineDXGISwapChainFactory;
#ifdef __cplusplus
interface IWineDXGISwapChainFactory;
#endif /* __cplusplus */
#endif

#ifndef __IWineDXGIDevice_FWD_DEFINED__
#define __IWineDXGIDevice_FWD_DEFINED__
typedef interface IWineDXGIDevice IWineDXGIDevice;
#ifdef __cplusplus
interface IWineDXGIDevice;
#endif /* __cplusplus */
#endif

#ifndef __IWineDXGIDeviceParent_FWD_DEFINED__
#define __IWineDXGIDeviceParent_FWD_DEFINED__
typedef interface IWineDXGIDeviceParent IWineDXGIDeviceParent;
#ifdef __cplusplus
interface IWineDXGIDeviceParent;
#endif /* __cplusplus */
#endif

#ifndef __IWineDXGIAdapter_FWD_DEFINED__
#define __IWineDXGIAdapter_FWD_DEFINED__
typedef interface IWineDXGIAdapter IWineDXGIAdapter;
#ifdef __cplusplus
interface IWineDXGIAdapter;
#endif /* __cplusplus */
#endif

#ifndef __IWineDXGIFactory_FWD_DEFINED__
#define __IWineDXGIFactory_FWD_DEFINED__
typedef interface IWineDXGIFactory IWineDXGIFactory;
#ifdef __cplusplus
interface IWineDXGIFactory;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <dxgi1_6.h>

#ifdef __cplusplus
extern "C" {
#endif

/*****************************************************************************
 * IWineDXGISwapChainFactory interface
 */
#ifndef __IWineDXGISwapChainFactory_INTERFACE_DEFINED__
#define __IWineDXGISwapChainFactory_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWineDXGISwapChainFactory, 0x53cb4ff0, 0xc25a, 0x4164, 0xa8,0x91, 0x0e,0x83,0xdb,0x0a,0x7a,0xac);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("53cb4ff0-c25a-4164-a891-0e83db0a7aac")
IWineDXGISwapChainFactory : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE create_swapchain(
        IDXGIFactory *factory,
        HWND window,
        const DXGI_SWAP_CHAIN_DESC1 *desc,
        const DXGI_SWAP_CHAIN_FULLSCREEN_DESC *fullscreen_desc,
        IDXGIOutput *output,
        IDXGISwapChain1 **swapchain) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWineDXGISwapChainFactory, 0x53cb4ff0, 0xc25a, 0x4164, 0xa8,0x91, 0x0e,0x83,0xdb,0x0a,0x7a,0xac)
#endif
#else
typedef struct IWineDXGISwapChainFactoryVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWineDXGISwapChainFactory *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWineDXGISwapChainFactory *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWineDXGISwapChainFactory *This);

    /*** IWineDXGISwapChainFactory methods ***/
    HRESULT (STDMETHODCALLTYPE *create_swapchain)(
        IWineDXGISwapChainFactory *This,
        IDXGIFactory *factory,
        HWND window,
        const DXGI_SWAP_CHAIN_DESC1 *desc,
        const DXGI_SWAP_CHAIN_FULLSCREEN_DESC *fullscreen_desc,
        IDXGIOutput *output,
        IDXGISwapChain1 **swapchain);

    END_INTERFACE
} IWineDXGISwapChainFactoryVtbl;

interface IWineDXGISwapChainFactory {
    CONST_VTBL IWineDXGISwapChainFactoryVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWineDXGISwapChainFactory_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWineDXGISwapChainFactory_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWineDXGISwapChainFactory_Release(This) (This)->lpVtbl->Release(This)
/*** IWineDXGISwapChainFactory methods ***/
#define IWineDXGISwapChainFactory_create_swapchain(This,factory,window,desc,fullscreen_desc,output,swapchain) (This)->lpVtbl->create_swapchain(This,factory,window,desc,fullscreen_desc,output,swapchain)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IWineDXGISwapChainFactory_QueryInterface(IWineDXGISwapChainFactory* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IWineDXGISwapChainFactory_AddRef(IWineDXGISwapChainFactory* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IWineDXGISwapChainFactory_Release(IWineDXGISwapChainFactory* This) {
    return This->lpVtbl->Release(This);
}
/*** IWineDXGISwapChainFactory methods ***/
static FORCEINLINE HRESULT IWineDXGISwapChainFactory_create_swapchain(IWineDXGISwapChainFactory* This,IDXGIFactory *factory,HWND window,const DXGI_SWAP_CHAIN_DESC1 *desc,const DXGI_SWAP_CHAIN_FULLSCREEN_DESC *fullscreen_desc,IDXGIOutput *output,IDXGISwapChain1 **swapchain) {
    return This->lpVtbl->create_swapchain(This,factory,window,desc,fullscreen_desc,output,swapchain);
}
#endif
#endif

#endif


#endif  /* __IWineDXGISwapChainFactory_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWineDXGIDevice interface
 */
#ifndef __IWineDXGIDevice_INTERFACE_DEFINED__
#define __IWineDXGIDevice_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWineDXGIDevice, 0x3e1ff30b, 0xc951, 0x48c3, 0xb0,0x10, 0x0f,0xb4,0x9f,0x3d,0xca,0x71);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("3e1ff30b-c951-48c3-b010-0fb49f3dca71")
IWineDXGIDevice : public IDXGIDevice3
{
    virtual HRESULT STDMETHODCALLTYPE create_surface(
        struct wined3d_texture *wined3d_texture,
        DXGI_USAGE usage,
        const DXGI_SHARED_RESOURCE *shared_resource,
        IUnknown *outer,
        void **surface) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWineDXGIDevice, 0x3e1ff30b, 0xc951, 0x48c3, 0xb0,0x10, 0x0f,0xb4,0x9f,0x3d,0xca,0x71)
#endif
#else
typedef struct IWineDXGIDeviceVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWineDXGIDevice *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWineDXGIDevice *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWineDXGIDevice *This);

    /*** IDXGIObject methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
        IWineDXGIDevice *This,
        REFGUID guid,
        UINT data_size,
        const void *data);

    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
        IWineDXGIDevice *This,
        REFGUID guid,
        const IUnknown *object);

    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
        IWineDXGIDevice *This,
        REFGUID guid,
        UINT *data_size,
        void *data);

    HRESULT (STDMETHODCALLTYPE *GetParent)(
        IWineDXGIDevice *This,
        REFIID riid,
        void **parent);

    /*** IDXGIDevice methods ***/
    HRESULT (STDMETHODCALLTYPE *GetAdapter)(
        IWineDXGIDevice *This,
        IDXGIAdapter **adapter);

    HRESULT (STDMETHODCALLTYPE *CreateSurface)(
        IWineDXGIDevice *This,
        const DXGI_SURFACE_DESC *desc,
        UINT surface_count,
        DXGI_USAGE usage,
        const DXGI_SHARED_RESOURCE *shared_resource,
        IDXGISurface **surface);

    HRESULT (STDMETHODCALLTYPE *QueryResourceResidency)(
        IWineDXGIDevice *This,
        IUnknown *const *resources,
        DXGI_RESIDENCY *residency,
        UINT resource_count);

    HRESULT (STDMETHODCALLTYPE *SetGPUThreadPriority)(
        IWineDXGIDevice *This,
        INT priority);

    HRESULT (STDMETHODCALLTYPE *GetGPUThreadPriority)(
        IWineDXGIDevice *This,
        INT *priority);

    /*** IDXGIDevice1 methods ***/
    HRESULT (STDMETHODCALLTYPE *SetMaximumFrameLatency)(
        IWineDXGIDevice *This,
        UINT MaxLatency);

    HRESULT (STDMETHODCALLTYPE *GetMaximumFrameLatency)(
        IWineDXGIDevice *This,
        UINT *pMaxLatency);

    /*** IDXGIDevice2 methods ***/
    HRESULT (STDMETHODCALLTYPE *OfferResources)(
        IWineDXGIDevice *This,
        UINT NumResources,
        IDXGIResource *const *ppResources,
        DXGI_OFFER_RESOURCE_PRIORITY Priority);

    HRESULT (STDMETHODCALLTYPE *ReclaimResources)(
        IWineDXGIDevice *This,
        UINT NumResources,
        IDXGIResource *const *ppResources,
        BOOL *pDiscarded);

    HRESULT (STDMETHODCALLTYPE *EnqueueSetEvent)(
        IWineDXGIDevice *This,
        HANDLE hEvent);

    /*** IDXGIDevice3 methods ***/
    void (STDMETHODCALLTYPE *Trim)(
        IWineDXGIDevice *This);

    /*** IWineDXGIDevice methods ***/
    HRESULT (STDMETHODCALLTYPE *create_surface)(
        IWineDXGIDevice *This,
        struct wined3d_texture *wined3d_texture,
        DXGI_USAGE usage,
        const DXGI_SHARED_RESOURCE *shared_resource,
        IUnknown *outer,
        void **surface);

    END_INTERFACE
} IWineDXGIDeviceVtbl;

interface IWineDXGIDevice {
    CONST_VTBL IWineDXGIDeviceVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWineDXGIDevice_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWineDXGIDevice_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWineDXGIDevice_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIObject methods ***/
#define IWineDXGIDevice_SetPrivateData(This,guid,data_size,data) (This)->lpVtbl->SetPrivateData(This,guid,data_size,data)
#define IWineDXGIDevice_SetPrivateDataInterface(This,guid,object) (This)->lpVtbl->SetPrivateDataInterface(This,guid,object)
#define IWineDXGIDevice_GetPrivateData(This,guid,data_size,data) (This)->lpVtbl->GetPrivateData(This,guid,data_size,data)
#define IWineDXGIDevice_GetParent(This,riid,parent) (This)->lpVtbl->GetParent(This,riid,parent)
/*** IDXGIDevice methods ***/
#define IWineDXGIDevice_GetAdapter(This,adapter) (This)->lpVtbl->GetAdapter(This,adapter)
#define IWineDXGIDevice_CreateSurface(This,desc,surface_count,usage,shared_resource,surface) (This)->lpVtbl->CreateSurface(This,desc,surface_count,usage,shared_resource,surface)
#define IWineDXGIDevice_QueryResourceResidency(This,resources,residency,resource_count) (This)->lpVtbl->QueryResourceResidency(This,resources,residency,resource_count)
#define IWineDXGIDevice_SetGPUThreadPriority(This,priority) (This)->lpVtbl->SetGPUThreadPriority(This,priority)
#define IWineDXGIDevice_GetGPUThreadPriority(This,priority) (This)->lpVtbl->GetGPUThreadPriority(This,priority)
/*** IDXGIDevice1 methods ***/
#define IWineDXGIDevice_SetMaximumFrameLatency(This,MaxLatency) (This)->lpVtbl->SetMaximumFrameLatency(This,MaxLatency)
#define IWineDXGIDevice_GetMaximumFrameLatency(This,pMaxLatency) (This)->lpVtbl->GetMaximumFrameLatency(This,pMaxLatency)
/*** IDXGIDevice2 methods ***/
#define IWineDXGIDevice_OfferResources(This,NumResources,ppResources,Priority) (This)->lpVtbl->OfferResources(This,NumResources,ppResources,Priority)
#define IWineDXGIDevice_ReclaimResources(This,NumResources,ppResources,pDiscarded) (This)->lpVtbl->ReclaimResources(This,NumResources,ppResources,pDiscarded)
#define IWineDXGIDevice_EnqueueSetEvent(This,hEvent) (This)->lpVtbl->EnqueueSetEvent(This,hEvent)
/*** IDXGIDevice3 methods ***/
#define IWineDXGIDevice_Trim(This) (This)->lpVtbl->Trim(This)
/*** IWineDXGIDevice methods ***/
#define IWineDXGIDevice_create_surface(This,wined3d_texture,usage,shared_resource,outer,surface) (This)->lpVtbl->create_surface(This,wined3d_texture,usage,shared_resource,outer,surface)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IWineDXGIDevice_QueryInterface(IWineDXGIDevice* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IWineDXGIDevice_AddRef(IWineDXGIDevice* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IWineDXGIDevice_Release(IWineDXGIDevice* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIObject methods ***/
static FORCEINLINE HRESULT IWineDXGIDevice_SetPrivateData(IWineDXGIDevice* This,REFGUID guid,UINT data_size,const void *data) {
    return This->lpVtbl->SetPrivateData(This,guid,data_size,data);
}
static FORCEINLINE HRESULT IWineDXGIDevice_SetPrivateDataInterface(IWineDXGIDevice* This,REFGUID guid,const IUnknown *object) {
    return This->lpVtbl->SetPrivateDataInterface(This,guid,object);
}
static FORCEINLINE HRESULT IWineDXGIDevice_GetPrivateData(IWineDXGIDevice* This,REFGUID guid,UINT *data_size,void *data) {
    return This->lpVtbl->GetPrivateData(This,guid,data_size,data);
}
static FORCEINLINE HRESULT IWineDXGIDevice_GetParent(IWineDXGIDevice* This,REFIID riid,void **parent) {
    return This->lpVtbl->GetParent(This,riid,parent);
}
/*** IDXGIDevice methods ***/
static FORCEINLINE HRESULT IWineDXGIDevice_GetAdapter(IWineDXGIDevice* This,IDXGIAdapter **adapter) {
    return This->lpVtbl->GetAdapter(This,adapter);
}
static FORCEINLINE HRESULT IWineDXGIDevice_CreateSurface(IWineDXGIDevice* This,const DXGI_SURFACE_DESC *desc,UINT surface_count,DXGI_USAGE usage,const DXGI_SHARED_RESOURCE *shared_resource,IDXGISurface **surface) {
    return This->lpVtbl->CreateSurface(This,desc,surface_count,usage,shared_resource,surface);
}
static FORCEINLINE HRESULT IWineDXGIDevice_QueryResourceResidency(IWineDXGIDevice* This,IUnknown *const *resources,DXGI_RESIDENCY *residency,UINT resource_count) {
    return This->lpVtbl->QueryResourceResidency(This,resources,residency,resource_count);
}
static FORCEINLINE HRESULT IWineDXGIDevice_SetGPUThreadPriority(IWineDXGIDevice* This,INT priority) {
    return This->lpVtbl->SetGPUThreadPriority(This,priority);
}
static FORCEINLINE HRESULT IWineDXGIDevice_GetGPUThreadPriority(IWineDXGIDevice* This,INT *priority) {
    return This->lpVtbl->GetGPUThreadPriority(This,priority);
}
/*** IDXGIDevice1 methods ***/
static FORCEINLINE HRESULT IWineDXGIDevice_SetMaximumFrameLatency(IWineDXGIDevice* This,UINT MaxLatency) {
    return This->lpVtbl->SetMaximumFrameLatency(This,MaxLatency);
}
static FORCEINLINE HRESULT IWineDXGIDevice_GetMaximumFrameLatency(IWineDXGIDevice* This,UINT *pMaxLatency) {
    return This->lpVtbl->GetMaximumFrameLatency(This,pMaxLatency);
}
/*** IDXGIDevice2 methods ***/
static FORCEINLINE HRESULT IWineDXGIDevice_OfferResources(IWineDXGIDevice* This,UINT NumResources,IDXGIResource *const *ppResources,DXGI_OFFER_RESOURCE_PRIORITY Priority) {
    return This->lpVtbl->OfferResources(This,NumResources,ppResources,Priority);
}
static FORCEINLINE HRESULT IWineDXGIDevice_ReclaimResources(IWineDXGIDevice* This,UINT NumResources,IDXGIResource *const *ppResources,BOOL *pDiscarded) {
    return This->lpVtbl->ReclaimResources(This,NumResources,ppResources,pDiscarded);
}
static FORCEINLINE HRESULT IWineDXGIDevice_EnqueueSetEvent(IWineDXGIDevice* This,HANDLE hEvent) {
    return This->lpVtbl->EnqueueSetEvent(This,hEvent);
}
/*** IDXGIDevice3 methods ***/
static FORCEINLINE void IWineDXGIDevice_Trim(IWineDXGIDevice* This) {
    This->lpVtbl->Trim(This);
}
/*** IWineDXGIDevice methods ***/
static FORCEINLINE HRESULT IWineDXGIDevice_create_surface(IWineDXGIDevice* This,struct wined3d_texture *wined3d_texture,DXGI_USAGE usage,const DXGI_SHARED_RESOURCE *shared_resource,IUnknown *outer,void **surface) {
    return This->lpVtbl->create_surface(This,wined3d_texture,usage,shared_resource,outer,surface);
}
#endif
#endif

#endif


#endif  /* __IWineDXGIDevice_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWineDXGIDeviceParent interface
 */
#ifndef __IWineDXGIDeviceParent_INTERFACE_DEFINED__
#define __IWineDXGIDeviceParent_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWineDXGIDeviceParent, 0xf2b918f3, 0x603f, 0x430a, 0x9c,0xcd, 0x55,0x87,0x2b,0x6e,0x85,0xdf);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("f2b918f3-603f-430a-9ccd-55872b6e85df")
IWineDXGIDeviceParent : public IUnknown
{
    virtual struct wined3d_device_parent * STDMETHODCALLTYPE get_wined3d_device_parent(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWineDXGIDeviceParent, 0xf2b918f3, 0x603f, 0x430a, 0x9c,0xcd, 0x55,0x87,0x2b,0x6e,0x85,0xdf)
#endif
#else
typedef struct IWineDXGIDeviceParentVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWineDXGIDeviceParent *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWineDXGIDeviceParent *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWineDXGIDeviceParent *This);

    /*** IWineDXGIDeviceParent methods ***/
    struct wined3d_device_parent * (STDMETHODCALLTYPE *get_wined3d_device_parent)(
        IWineDXGIDeviceParent *This);

    END_INTERFACE
} IWineDXGIDeviceParentVtbl;

interface IWineDXGIDeviceParent {
    CONST_VTBL IWineDXGIDeviceParentVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWineDXGIDeviceParent_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWineDXGIDeviceParent_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWineDXGIDeviceParent_Release(This) (This)->lpVtbl->Release(This)
/*** IWineDXGIDeviceParent methods ***/
#define IWineDXGIDeviceParent_get_wined3d_device_parent(This) (This)->lpVtbl->get_wined3d_device_parent(This)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IWineDXGIDeviceParent_QueryInterface(IWineDXGIDeviceParent* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IWineDXGIDeviceParent_AddRef(IWineDXGIDeviceParent* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IWineDXGIDeviceParent_Release(IWineDXGIDeviceParent* This) {
    return This->lpVtbl->Release(This);
}
/*** IWineDXGIDeviceParent methods ***/
static FORCEINLINE struct wined3d_device_parent * IWineDXGIDeviceParent_get_wined3d_device_parent(IWineDXGIDeviceParent* This) {
    return This->lpVtbl->get_wined3d_device_parent(This);
}
#endif
#endif

#endif


#endif  /* __IWineDXGIDeviceParent_INTERFACE_DEFINED__ */

struct wine_dxgi_adapter_info {
    GUID driver_uuid;
    GUID device_uuid;
    DWORD vendor_id;
    DWORD device_id;
    LUID luid;
};
/*****************************************************************************
 * IWineDXGIAdapter interface
 */
#ifndef __IWineDXGIAdapter_INTERFACE_DEFINED__
#define __IWineDXGIAdapter_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWineDXGIAdapter, 0x17399d75, 0x964e, 0x4c03, 0x99,0xf8, 0x9d,0x4f,0xd1,0x96,0xdd,0x62);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("17399d75-964e-4c03-99f8-9d4fd196dd62")
IWineDXGIAdapter : public IDXGIAdapter4
{
    virtual HRESULT STDMETHODCALLTYPE get_adapter_info(
        struct wine_dxgi_adapter_info *info) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWineDXGIAdapter, 0x17399d75, 0x964e, 0x4c03, 0x99,0xf8, 0x9d,0x4f,0xd1,0x96,0xdd,0x62)
#endif
#else
typedef struct IWineDXGIAdapterVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWineDXGIAdapter *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWineDXGIAdapter *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWineDXGIAdapter *This);

    /*** IDXGIObject methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
        IWineDXGIAdapter *This,
        REFGUID guid,
        UINT data_size,
        const void *data);

    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
        IWineDXGIAdapter *This,
        REFGUID guid,
        const IUnknown *object);

    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
        IWineDXGIAdapter *This,
        REFGUID guid,
        UINT *data_size,
        void *data);

    HRESULT (STDMETHODCALLTYPE *GetParent)(
        IWineDXGIAdapter *This,
        REFIID riid,
        void **parent);

    /*** IDXGIAdapter methods ***/
    HRESULT (STDMETHODCALLTYPE *EnumOutputs)(
        IWineDXGIAdapter *This,
        UINT output_idx,
        IDXGIOutput **output);

    HRESULT (STDMETHODCALLTYPE *GetDesc)(
        IWineDXGIAdapter *This,
        DXGI_ADAPTER_DESC *desc);

    HRESULT (STDMETHODCALLTYPE *CheckInterfaceSupport)(
        IWineDXGIAdapter *This,
        REFGUID guid,
        LARGE_INTEGER *umd_version);

    /*** IDXGIAdapter1 methods ***/
    HRESULT (STDMETHODCALLTYPE *GetDesc1)(
        IWineDXGIAdapter *This,
        DXGI_ADAPTER_DESC1 *pDesc);

    /*** IDXGIAdapter2 methods ***/
    HRESULT (STDMETHODCALLTYPE *GetDesc2)(
        IWineDXGIAdapter *This,
        DXGI_ADAPTER_DESC2 *pDesc);

    /*** IDXGIAdapter3 methods ***/
    HRESULT (STDMETHODCALLTYPE *RegisterHardwareContentProtectionTeardownStatusEvent)(
        IWineDXGIAdapter *This,
        HANDLE event,
        DWORD *cookie);

    void (STDMETHODCALLTYPE *UnregisterHardwareContentProtectionTeardownStatus)(
        IWineDXGIAdapter *This,
        DWORD cookie);

    HRESULT (STDMETHODCALLTYPE *QueryVideoMemoryInfo)(
        IWineDXGIAdapter *This,
        UINT node_index,
        DXGI_MEMORY_SEGMENT_GROUP segment_group,
        DXGI_QUERY_VIDEO_MEMORY_INFO *memory_info);

    HRESULT (STDMETHODCALLTYPE *SetVideoMemoryReservation)(
        IWineDXGIAdapter *This,
        UINT node_index,
        DXGI_MEMORY_SEGMENT_GROUP segment_group,
        UINT64 reservation);

    HRESULT (STDMETHODCALLTYPE *RegisterVideoMemoryBudgetChangeNotificationEvent)(
        IWineDXGIAdapter *This,
        HANDLE event,
        DWORD *cookie);

    void (STDMETHODCALLTYPE *UnregisterVideoMemoryBudgetChangeNotification)(
        IWineDXGIAdapter *This,
        DWORD cookie);

    /*** IDXGIAdapter4 methods ***/
    HRESULT (STDMETHODCALLTYPE *GetDesc3)(
        IWineDXGIAdapter *This,
        DXGI_ADAPTER_DESC3 *desc);

    /*** IWineDXGIAdapter methods ***/
    HRESULT (STDMETHODCALLTYPE *get_adapter_info)(
        IWineDXGIAdapter *This,
        struct wine_dxgi_adapter_info *info);

    END_INTERFACE
} IWineDXGIAdapterVtbl;

interface IWineDXGIAdapter {
    CONST_VTBL IWineDXGIAdapterVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWineDXGIAdapter_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWineDXGIAdapter_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWineDXGIAdapter_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIObject methods ***/
#define IWineDXGIAdapter_SetPrivateData(This,guid,data_size,data) (This)->lpVtbl->SetPrivateData(This,guid,data_size,data)
#define IWineDXGIAdapter_SetPrivateDataInterface(This,guid,object) (This)->lpVtbl->SetPrivateDataInterface(This,guid,object)
#define IWineDXGIAdapter_GetPrivateData(This,guid,data_size,data) (This)->lpVtbl->GetPrivateData(This,guid,data_size,data)
#define IWineDXGIAdapter_GetParent(This,riid,parent) (This)->lpVtbl->GetParent(This,riid,parent)
/*** IDXGIAdapter methods ***/
#define IWineDXGIAdapter_EnumOutputs(This,output_idx,output) (This)->lpVtbl->EnumOutputs(This,output_idx,output)
#define IWineDXGIAdapter_GetDesc(This,desc) (This)->lpVtbl->GetDesc(This,desc)
#define IWineDXGIAdapter_CheckInterfaceSupport(This,guid,umd_version) (This)->lpVtbl->CheckInterfaceSupport(This,guid,umd_version)
/*** IDXGIAdapter1 methods ***/
#define IWineDXGIAdapter_GetDesc1(This,pDesc) (This)->lpVtbl->GetDesc1(This,pDesc)
/*** IDXGIAdapter2 methods ***/
#define IWineDXGIAdapter_GetDesc2(This,pDesc) (This)->lpVtbl->GetDesc2(This,pDesc)
/*** IDXGIAdapter3 methods ***/
#define IWineDXGIAdapter_RegisterHardwareContentProtectionTeardownStatusEvent(This,event,cookie) (This)->lpVtbl->RegisterHardwareContentProtectionTeardownStatusEvent(This,event,cookie)
#define IWineDXGIAdapter_UnregisterHardwareContentProtectionTeardownStatus(This,cookie) (This)->lpVtbl->UnregisterHardwareContentProtectionTeardownStatus(This,cookie)
#define IWineDXGIAdapter_QueryVideoMemoryInfo(This,node_index,segment_group,memory_info) (This)->lpVtbl->QueryVideoMemoryInfo(This,node_index,segment_group,memory_info)
#define IWineDXGIAdapter_SetVideoMemoryReservation(This,node_index,segment_group,reservation) (This)->lpVtbl->SetVideoMemoryReservation(This,node_index,segment_group,reservation)
#define IWineDXGIAdapter_RegisterVideoMemoryBudgetChangeNotificationEvent(This,event,cookie) (This)->lpVtbl->RegisterVideoMemoryBudgetChangeNotificationEvent(This,event,cookie)
#define IWineDXGIAdapter_UnregisterVideoMemoryBudgetChangeNotification(This,cookie) (This)->lpVtbl->UnregisterVideoMemoryBudgetChangeNotification(This,cookie)
/*** IDXGIAdapter4 methods ***/
#define IWineDXGIAdapter_GetDesc3(This,desc) (This)->lpVtbl->GetDesc3(This,desc)
/*** IWineDXGIAdapter methods ***/
#define IWineDXGIAdapter_get_adapter_info(This,info) (This)->lpVtbl->get_adapter_info(This,info)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IWineDXGIAdapter_QueryInterface(IWineDXGIAdapter* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IWineDXGIAdapter_AddRef(IWineDXGIAdapter* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IWineDXGIAdapter_Release(IWineDXGIAdapter* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIObject methods ***/
static FORCEINLINE HRESULT IWineDXGIAdapter_SetPrivateData(IWineDXGIAdapter* This,REFGUID guid,UINT data_size,const void *data) {
    return This->lpVtbl->SetPrivateData(This,guid,data_size,data);
}
static FORCEINLINE HRESULT IWineDXGIAdapter_SetPrivateDataInterface(IWineDXGIAdapter* This,REFGUID guid,const IUnknown *object) {
    return This->lpVtbl->SetPrivateDataInterface(This,guid,object);
}
static FORCEINLINE HRESULT IWineDXGIAdapter_GetPrivateData(IWineDXGIAdapter* This,REFGUID guid,UINT *data_size,void *data) {
    return This->lpVtbl->GetPrivateData(This,guid,data_size,data);
}
static FORCEINLINE HRESULT IWineDXGIAdapter_GetParent(IWineDXGIAdapter* This,REFIID riid,void **parent) {
    return This->lpVtbl->GetParent(This,riid,parent);
}
/*** IDXGIAdapter methods ***/
static FORCEINLINE HRESULT IWineDXGIAdapter_EnumOutputs(IWineDXGIAdapter* This,UINT output_idx,IDXGIOutput **output) {
    return This->lpVtbl->EnumOutputs(This,output_idx,output);
}
static FORCEINLINE HRESULT IWineDXGIAdapter_GetDesc(IWineDXGIAdapter* This,DXGI_ADAPTER_DESC *desc) {
    return This->lpVtbl->GetDesc(This,desc);
}
static FORCEINLINE HRESULT IWineDXGIAdapter_CheckInterfaceSupport(IWineDXGIAdapter* This,REFGUID guid,LARGE_INTEGER *umd_version) {
    return This->lpVtbl->CheckInterfaceSupport(This,guid,umd_version);
}
/*** IDXGIAdapter1 methods ***/
static FORCEINLINE HRESULT IWineDXGIAdapter_GetDesc1(IWineDXGIAdapter* This,DXGI_ADAPTER_DESC1 *pDesc) {
    return This->lpVtbl->GetDesc1(This,pDesc);
}
/*** IDXGIAdapter2 methods ***/
static FORCEINLINE HRESULT IWineDXGIAdapter_GetDesc2(IWineDXGIAdapter* This,DXGI_ADAPTER_DESC2 *pDesc) {
    return This->lpVtbl->GetDesc2(This,pDesc);
}
/*** IDXGIAdapter3 methods ***/
static FORCEINLINE HRESULT IWineDXGIAdapter_RegisterHardwareContentProtectionTeardownStatusEvent(IWineDXGIAdapter* This,HANDLE event,DWORD *cookie) {
    return This->lpVtbl->RegisterHardwareContentProtectionTeardownStatusEvent(This,event,cookie);
}
static FORCEINLINE void IWineDXGIAdapter_UnregisterHardwareContentProtectionTeardownStatus(IWineDXGIAdapter* This,DWORD cookie) {
    This->lpVtbl->UnregisterHardwareContentProtectionTeardownStatus(This,cookie);
}
static FORCEINLINE HRESULT IWineDXGIAdapter_QueryVideoMemoryInfo(IWineDXGIAdapter* This,UINT node_index,DXGI_MEMORY_SEGMENT_GROUP segment_group,DXGI_QUERY_VIDEO_MEMORY_INFO *memory_info) {
    return This->lpVtbl->QueryVideoMemoryInfo(This,node_index,segment_group,memory_info);
}
static FORCEINLINE HRESULT IWineDXGIAdapter_SetVideoMemoryReservation(IWineDXGIAdapter* This,UINT node_index,DXGI_MEMORY_SEGMENT_GROUP segment_group,UINT64 reservation) {
    return This->lpVtbl->SetVideoMemoryReservation(This,node_index,segment_group,reservation);
}
static FORCEINLINE HRESULT IWineDXGIAdapter_RegisterVideoMemoryBudgetChangeNotificationEvent(IWineDXGIAdapter* This,HANDLE event,DWORD *cookie) {
    return This->lpVtbl->RegisterVideoMemoryBudgetChangeNotificationEvent(This,event,cookie);
}
static FORCEINLINE void IWineDXGIAdapter_UnregisterVideoMemoryBudgetChangeNotification(IWineDXGIAdapter* This,DWORD cookie) {
    This->lpVtbl->UnregisterVideoMemoryBudgetChangeNotification(This,cookie);
}
/*** IDXGIAdapter4 methods ***/
static FORCEINLINE HRESULT IWineDXGIAdapter_GetDesc3(IWineDXGIAdapter* This,DXGI_ADAPTER_DESC3 *desc) {
    return This->lpVtbl->GetDesc3(This,desc);
}
/*** IWineDXGIAdapter methods ***/
static FORCEINLINE HRESULT IWineDXGIAdapter_get_adapter_info(IWineDXGIAdapter* This,struct wine_dxgi_adapter_info *info) {
    return This->lpVtbl->get_adapter_info(This,info);
}
#endif
#endif

#endif


#endif  /* __IWineDXGIAdapter_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IWineDXGIFactory interface
 */
#ifndef __IWineDXGIFactory_INTERFACE_DEFINED__
#define __IWineDXGIFactory_INTERFACE_DEFINED__

DEFINE_GUID(IID_IWineDXGIFactory, 0xea02a0d1, 0x4c95, 0x488a, 0xa8,0x2c, 0x60,0x34,0x62,0x1e,0x8c,0x4f);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("ea02a0d1-4c95-488a-a82c-6034621e8c4f")
IWineDXGIFactory : public IDXGIFactory5
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IWineDXGIFactory, 0xea02a0d1, 0x4c95, 0x488a, 0xa8,0x2c, 0x60,0x34,0x62,0x1e,0x8c,0x4f)
#endif
#else
typedef struct IWineDXGIFactoryVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IWineDXGIFactory *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IWineDXGIFactory *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IWineDXGIFactory *This);

    /*** IDXGIObject methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrivateData)(
        IWineDXGIFactory *This,
        REFGUID guid,
        UINT data_size,
        const void *data);

    HRESULT (STDMETHODCALLTYPE *SetPrivateDataInterface)(
        IWineDXGIFactory *This,
        REFGUID guid,
        const IUnknown *object);

    HRESULT (STDMETHODCALLTYPE *GetPrivateData)(
        IWineDXGIFactory *This,
        REFGUID guid,
        UINT *data_size,
        void *data);

    HRESULT (STDMETHODCALLTYPE *GetParent)(
        IWineDXGIFactory *This,
        REFIID riid,
        void **parent);

    /*** IDXGIFactory methods ***/
    HRESULT (STDMETHODCALLTYPE *EnumAdapters)(
        IWineDXGIFactory *This,
        UINT adapter_idx,
        IDXGIAdapter **adapter);

    HRESULT (STDMETHODCALLTYPE *MakeWindowAssociation)(
        IWineDXGIFactory *This,
        HWND window,
        UINT flags);

    HRESULT (STDMETHODCALLTYPE *GetWindowAssociation)(
        IWineDXGIFactory *This,
        HWND *window);

    HRESULT (STDMETHODCALLTYPE *CreateSwapChain)(
        IWineDXGIFactory *This,
        IUnknown *device,
        DXGI_SWAP_CHAIN_DESC *desc,
        IDXGISwapChain **swapchain);

    HRESULT (STDMETHODCALLTYPE *CreateSoftwareAdapter)(
        IWineDXGIFactory *This,
        HMODULE swrast,
        IDXGIAdapter **adapter);

    /*** IDXGIFactory1 methods ***/
    HRESULT (STDMETHODCALLTYPE *EnumAdapters1)(
        IWineDXGIFactory *This,
        UINT Adapter,
        IDXGIAdapter1 **ppAdapter);

    BOOL (STDMETHODCALLTYPE *IsCurrent)(
        IWineDXGIFactory *This);

    /*** IDXGIFactory2 methods ***/
    BOOL (STDMETHODCALLTYPE *IsWindowedStereoEnabled)(
        IWineDXGIFactory *This);

    HRESULT (STDMETHODCALLTYPE *CreateSwapChainForHwnd)(
        IWineDXGIFactory *This,
        IUnknown *pDevice,
        HWND hWnd,
        const DXGI_SWAP_CHAIN_DESC1 *pDesc,
        const DXGI_SWAP_CHAIN_FULLSCREEN_DESC *pFullscreenDesc,
        IDXGIOutput *pRestrictToOutput,
        IDXGISwapChain1 **ppSwapChain);

    HRESULT (STDMETHODCALLTYPE *CreateSwapChainForCoreWindow)(
        IWineDXGIFactory *This,
        IUnknown *pDevice,
        IUnknown *pWindow,
        const DXGI_SWAP_CHAIN_DESC1 *pDesc,
        IDXGIOutput *pRestrictToOutput,
        IDXGISwapChain1 **ppSwapChain);

    HRESULT (STDMETHODCALLTYPE *GetSharedResourceAdapterLuid)(
        IWineDXGIFactory *This,
        HANDLE hResource,
        LUID *pLuid);

    HRESULT (STDMETHODCALLTYPE *RegisterOcclusionStatusWindow)(
        IWineDXGIFactory *This,
        HWND WindowHandle,
        UINT wMsg,
        DWORD *pdwCookie);

    HRESULT (STDMETHODCALLTYPE *RegisterStereoStatusEvent)(
        IWineDXGIFactory *This,
        HANDLE hEvent,
        DWORD *pdwCookie);

    void (STDMETHODCALLTYPE *UnregisterStereoStatus)(
        IWineDXGIFactory *This,
        DWORD dwCookie);

    HRESULT (STDMETHODCALLTYPE *RegisterStereoStatusWindow)(
        IWineDXGIFactory *This,
        HWND WindowHandle,
        UINT wMsg,
        DWORD *pdwCookie);

    HRESULT (STDMETHODCALLTYPE *RegisterOcclusionStatusEvent)(
        IWineDXGIFactory *This,
        HANDLE hEvent,
        DWORD *pdwCookie);

    void (STDMETHODCALLTYPE *UnregisterOcclusionStatus)(
        IWineDXGIFactory *This,
        DWORD dwCookie);

    HRESULT (STDMETHODCALLTYPE *CreateSwapChainForComposition)(
        IWineDXGIFactory *This,
        IUnknown *pDevice,
        const DXGI_SWAP_CHAIN_DESC1 *pDesc,
        IDXGIOutput *pRestrictToOutput,
        IDXGISwapChain1 **ppSwapChain);

    /*** IDXGIFactory3 methods ***/
    UINT (STDMETHODCALLTYPE *GetCreationFlags)(
        IWineDXGIFactory *This);

    /*** IDXGIFactory4 methods ***/
    HRESULT (STDMETHODCALLTYPE *EnumAdapterByLuid)(
        IWineDXGIFactory *This,
        LUID luid,
        REFIID iid,
        void **adapter);

    HRESULT (STDMETHODCALLTYPE *EnumWarpAdapter)(
        IWineDXGIFactory *This,
        REFIID iid,
        void **adapter);

    /*** IDXGIFactory5 methods ***/
    HRESULT (STDMETHODCALLTYPE *CheckFeatureSupport)(
        IWineDXGIFactory *This,
        DXGI_FEATURE feature,
        void *support_data,
        UINT support_data_size);

    END_INTERFACE
} IWineDXGIFactoryVtbl;

interface IWineDXGIFactory {
    CONST_VTBL IWineDXGIFactoryVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IWineDXGIFactory_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IWineDXGIFactory_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IWineDXGIFactory_Release(This) (This)->lpVtbl->Release(This)
/*** IDXGIObject methods ***/
#define IWineDXGIFactory_SetPrivateData(This,guid,data_size,data) (This)->lpVtbl->SetPrivateData(This,guid,data_size,data)
#define IWineDXGIFactory_SetPrivateDataInterface(This,guid,object) (This)->lpVtbl->SetPrivateDataInterface(This,guid,object)
#define IWineDXGIFactory_GetPrivateData(This,guid,data_size,data) (This)->lpVtbl->GetPrivateData(This,guid,data_size,data)
#define IWineDXGIFactory_GetParent(This,riid,parent) (This)->lpVtbl->GetParent(This,riid,parent)
/*** IDXGIFactory methods ***/
#define IWineDXGIFactory_EnumAdapters(This,adapter_idx,adapter) (This)->lpVtbl->EnumAdapters(This,adapter_idx,adapter)
#define IWineDXGIFactory_MakeWindowAssociation(This,window,flags) (This)->lpVtbl->MakeWindowAssociation(This,window,flags)
#define IWineDXGIFactory_GetWindowAssociation(This,window) (This)->lpVtbl->GetWindowAssociation(This,window)
#define IWineDXGIFactory_CreateSwapChain(This,device,desc,swapchain) (This)->lpVtbl->CreateSwapChain(This,device,desc,swapchain)
#define IWineDXGIFactory_CreateSoftwareAdapter(This,swrast,adapter) (This)->lpVtbl->CreateSoftwareAdapter(This,swrast,adapter)
/*** IDXGIFactory1 methods ***/
#define IWineDXGIFactory_EnumAdapters1(This,Adapter,ppAdapter) (This)->lpVtbl->EnumAdapters1(This,Adapter,ppAdapter)
#define IWineDXGIFactory_IsCurrent(This) (This)->lpVtbl->IsCurrent(This)
/*** IDXGIFactory2 methods ***/
#define IWineDXGIFactory_IsWindowedStereoEnabled(This) (This)->lpVtbl->IsWindowedStereoEnabled(This)
#define IWineDXGIFactory_CreateSwapChainForHwnd(This,pDevice,hWnd,pDesc,pFullscreenDesc,pRestrictToOutput,ppSwapChain) (This)->lpVtbl->CreateSwapChainForHwnd(This,pDevice,hWnd,pDesc,pFullscreenDesc,pRestrictToOutput,ppSwapChain)
#define IWineDXGIFactory_CreateSwapChainForCoreWindow(This,pDevice,pWindow,pDesc,pRestrictToOutput,ppSwapChain) (This)->lpVtbl->CreateSwapChainForCoreWindow(This,pDevice,pWindow,pDesc,pRestrictToOutput,ppSwapChain)
#define IWineDXGIFactory_GetSharedResourceAdapterLuid(This,hResource,pLuid) (This)->lpVtbl->GetSharedResourceAdapterLuid(This,hResource,pLuid)
#define IWineDXGIFactory_RegisterOcclusionStatusWindow(This,WindowHandle,wMsg,pdwCookie) (This)->lpVtbl->RegisterOcclusionStatusWindow(This,WindowHandle,wMsg,pdwCookie)
#define IWineDXGIFactory_RegisterStereoStatusEvent(This,hEvent,pdwCookie) (This)->lpVtbl->RegisterStereoStatusEvent(This,hEvent,pdwCookie)
#define IWineDXGIFactory_UnregisterStereoStatus(This,dwCookie) (This)->lpVtbl->UnregisterStereoStatus(This,dwCookie)
#define IWineDXGIFactory_RegisterStereoStatusWindow(This,WindowHandle,wMsg,pdwCookie) (This)->lpVtbl->RegisterStereoStatusWindow(This,WindowHandle,wMsg,pdwCookie)
#define IWineDXGIFactory_RegisterOcclusionStatusEvent(This,hEvent,pdwCookie) (This)->lpVtbl->RegisterOcclusionStatusEvent(This,hEvent,pdwCookie)
#define IWineDXGIFactory_UnregisterOcclusionStatus(This,dwCookie) (This)->lpVtbl->UnregisterOcclusionStatus(This,dwCookie)
#define IWineDXGIFactory_CreateSwapChainForComposition(This,pDevice,pDesc,pRestrictToOutput,ppSwapChain) (This)->lpVtbl->CreateSwapChainForComposition(This,pDevice,pDesc,pRestrictToOutput,ppSwapChain)
/*** IDXGIFactory3 methods ***/
#define IWineDXGIFactory_GetCreationFlags(This) (This)->lpVtbl->GetCreationFlags(This)
/*** IDXGIFactory4 methods ***/
#define IWineDXGIFactory_EnumAdapterByLuid(This,luid,iid,adapter) (This)->lpVtbl->EnumAdapterByLuid(This,luid,iid,adapter)
#define IWineDXGIFactory_EnumWarpAdapter(This,iid,adapter) (This)->lpVtbl->EnumWarpAdapter(This,iid,adapter)
/*** IDXGIFactory5 methods ***/
#define IWineDXGIFactory_CheckFeatureSupport(This,feature,support_data,support_data_size) (This)->lpVtbl->CheckFeatureSupport(This,feature,support_data,support_data_size)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IWineDXGIFactory_QueryInterface(IWineDXGIFactory* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IWineDXGIFactory_AddRef(IWineDXGIFactory* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IWineDXGIFactory_Release(IWineDXGIFactory* This) {
    return This->lpVtbl->Release(This);
}
/*** IDXGIObject methods ***/
static FORCEINLINE HRESULT IWineDXGIFactory_SetPrivateData(IWineDXGIFactory* This,REFGUID guid,UINT data_size,const void *data) {
    return This->lpVtbl->SetPrivateData(This,guid,data_size,data);
}
static FORCEINLINE HRESULT IWineDXGIFactory_SetPrivateDataInterface(IWineDXGIFactory* This,REFGUID guid,const IUnknown *object) {
    return This->lpVtbl->SetPrivateDataInterface(This,guid,object);
}
static FORCEINLINE HRESULT IWineDXGIFactory_GetPrivateData(IWineDXGIFactory* This,REFGUID guid,UINT *data_size,void *data) {
    return This->lpVtbl->GetPrivateData(This,guid,data_size,data);
}
static FORCEINLINE HRESULT IWineDXGIFactory_GetParent(IWineDXGIFactory* This,REFIID riid,void **parent) {
    return This->lpVtbl->GetParent(This,riid,parent);
}
/*** IDXGIFactory methods ***/
static FORCEINLINE HRESULT IWineDXGIFactory_EnumAdapters(IWineDXGIFactory* This,UINT adapter_idx,IDXGIAdapter **adapter) {
    return This->lpVtbl->EnumAdapters(This,adapter_idx,adapter);
}
static FORCEINLINE HRESULT IWineDXGIFactory_MakeWindowAssociation(IWineDXGIFactory* This,HWND window,UINT flags) {
    return This->lpVtbl->MakeWindowAssociation(This,window,flags);
}
static FORCEINLINE HRESULT IWineDXGIFactory_GetWindowAssociation(IWineDXGIFactory* This,HWND *window) {
    return This->lpVtbl->GetWindowAssociation(This,window);
}
static FORCEINLINE HRESULT IWineDXGIFactory_CreateSwapChain(IWineDXGIFactory* This,IUnknown *device,DXGI_SWAP_CHAIN_DESC *desc,IDXGISwapChain **swapchain) {
    return This->lpVtbl->CreateSwapChain(This,device,desc,swapchain);
}
static FORCEINLINE HRESULT IWineDXGIFactory_CreateSoftwareAdapter(IWineDXGIFactory* This,HMODULE swrast,IDXGIAdapter **adapter) {
    return This->lpVtbl->CreateSoftwareAdapter(This,swrast,adapter);
}
/*** IDXGIFactory1 methods ***/
static FORCEINLINE HRESULT IWineDXGIFactory_EnumAdapters1(IWineDXGIFactory* This,UINT Adapter,IDXGIAdapter1 **ppAdapter) {
    return This->lpVtbl->EnumAdapters1(This,Adapter,ppAdapter);
}
static FORCEINLINE BOOL IWineDXGIFactory_IsCurrent(IWineDXGIFactory* This) {
    return This->lpVtbl->IsCurrent(This);
}
/*** IDXGIFactory2 methods ***/
static FORCEINLINE BOOL IWineDXGIFactory_IsWindowedStereoEnabled(IWineDXGIFactory* This) {
    return This->lpVtbl->IsWindowedStereoEnabled(This);
}
static FORCEINLINE HRESULT IWineDXGIFactory_CreateSwapChainForHwnd(IWineDXGIFactory* This,IUnknown *pDevice,HWND hWnd,const DXGI_SWAP_CHAIN_DESC1 *pDesc,const DXGI_SWAP_CHAIN_FULLSCREEN_DESC *pFullscreenDesc,IDXGIOutput *pRestrictToOutput,IDXGISwapChain1 **ppSwapChain) {
    return This->lpVtbl->CreateSwapChainForHwnd(This,pDevice,hWnd,pDesc,pFullscreenDesc,pRestrictToOutput,ppSwapChain);
}
static FORCEINLINE HRESULT IWineDXGIFactory_CreateSwapChainForCoreWindow(IWineDXGIFactory* This,IUnknown *pDevice,IUnknown *pWindow,const DXGI_SWAP_CHAIN_DESC1 *pDesc,IDXGIOutput *pRestrictToOutput,IDXGISwapChain1 **ppSwapChain) {
    return This->lpVtbl->CreateSwapChainForCoreWindow(This,pDevice,pWindow,pDesc,pRestrictToOutput,ppSwapChain);
}
static FORCEINLINE HRESULT IWineDXGIFactory_GetSharedResourceAdapterLuid(IWineDXGIFactory* This,HANDLE hResource,LUID *pLuid) {
    return This->lpVtbl->GetSharedResourceAdapterLuid(This,hResource,pLuid);
}
static FORCEINLINE HRESULT IWineDXGIFactory_RegisterOcclusionStatusWindow(IWineDXGIFactory* This,HWND WindowHandle,UINT wMsg,DWORD *pdwCookie) {
    return This->lpVtbl->RegisterOcclusionStatusWindow(This,WindowHandle,wMsg,pdwCookie);
}
static FORCEINLINE HRESULT IWineDXGIFactory_RegisterStereoStatusEvent(IWineDXGIFactory* This,HANDLE hEvent,DWORD *pdwCookie) {
    return This->lpVtbl->RegisterStereoStatusEvent(This,hEvent,pdwCookie);
}
static FORCEINLINE void IWineDXGIFactory_UnregisterStereoStatus(IWineDXGIFactory* This,DWORD dwCookie) {
    This->lpVtbl->UnregisterStereoStatus(This,dwCookie);
}
static FORCEINLINE HRESULT IWineDXGIFactory_RegisterStereoStatusWindow(IWineDXGIFactory* This,HWND WindowHandle,UINT wMsg,DWORD *pdwCookie) {
    return This->lpVtbl->RegisterStereoStatusWindow(This,WindowHandle,wMsg,pdwCookie);
}
static FORCEINLINE HRESULT IWineDXGIFactory_RegisterOcclusionStatusEvent(IWineDXGIFactory* This,HANDLE hEvent,DWORD *pdwCookie) {
    return This->lpVtbl->RegisterOcclusionStatusEvent(This,hEvent,pdwCookie);
}
static FORCEINLINE void IWineDXGIFactory_UnregisterOcclusionStatus(IWineDXGIFactory* This,DWORD dwCookie) {
    This->lpVtbl->UnregisterOcclusionStatus(This,dwCookie);
}
static FORCEINLINE HRESULT IWineDXGIFactory_CreateSwapChainForComposition(IWineDXGIFactory* This,IUnknown *pDevice,const DXGI_SWAP_CHAIN_DESC1 *pDesc,IDXGIOutput *pRestrictToOutput,IDXGISwapChain1 **ppSwapChain) {
    return This->lpVtbl->CreateSwapChainForComposition(This,pDevice,pDesc,pRestrictToOutput,ppSwapChain);
}
/*** IDXGIFactory3 methods ***/
static FORCEINLINE UINT IWineDXGIFactory_GetCreationFlags(IWineDXGIFactory* This) {
    return This->lpVtbl->GetCreationFlags(This);
}
/*** IDXGIFactory4 methods ***/
static FORCEINLINE HRESULT IWineDXGIFactory_EnumAdapterByLuid(IWineDXGIFactory* This,LUID luid,REFIID iid,void **adapter) {
    return This->lpVtbl->EnumAdapterByLuid(This,luid,iid,adapter);
}
static FORCEINLINE HRESULT IWineDXGIFactory_EnumWarpAdapter(IWineDXGIFactory* This,REFIID iid,void **adapter) {
    return This->lpVtbl->EnumWarpAdapter(This,iid,adapter);
}
/*** IDXGIFactory5 methods ***/
static FORCEINLINE HRESULT IWineDXGIFactory_CheckFeatureSupport(IWineDXGIFactory* This,DXGI_FEATURE feature,void *support_data,UINT support_data_size) {
    return This->lpVtbl->CheckFeatureSupport(This,feature,support_data,support_data_size);
}
#endif
#endif

#endif


#endif  /* __IWineDXGIFactory_INTERFACE_DEFINED__ */

/* Begin additional prototypes for all interfaces */


/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#ifdef __i386_on_x86_64__
#pragma clang default_addr_space(pop)
#pragma clang storage_addr_space(pop)
#endif
#endif /* __winedxgi_h__ */
